#!/bin/bash

source ../../lib_bash.sh

declare -a data
data=(0 0 0 0 0)
error_type=(0 0 0 0 0)
input_file_check=$1
output_file_check="output.txt"
output_file_check_after_find="output2.txt"

if [ -z "$input_file_check" ] ; then 
	echo "failed"	
	exit 0
fi

func_handler()
{
		read line < "$output_file_check_after_find"
        error_type[0]=$1;
        error_type[1]=$2;
        error_type[2]=$3;
        #check key of error return 0 or 1
        data[0]=$(echo $line|grep "${error_type[0]}"|wc -l)
        data[1]=$(echo $line|grep "${error_type[1]}"|wc -l)
        data[2]=$(echo $line|grep "${error_type[2]}"|wc -l)
        sum=$(( ${data[0]} + ${data[1]} + ${data[2]} ))
		if [ $sum == "0" ]; then 
			echo "None None None None"
			return 127
		fi
		local header=$(echo $line|awk '{print $2}'|cut -d':' -f1)
        case $sum in
                ${data[0]})
                        # unknown type name error
                        er=$(echo $line|awk '{for ( i = 1; i <= NF; i++ )
                        if ( $i=="name" ) print $(i+1)}')
                        er=""
                        er1=$(echo $line|awk '{for ( i = 1; i <= NF; i++ )
                        if ( $i=="function" ) print $(i+1)}')
                        ps=$(echo $line|awk '{print $0}'|cut -d':' -f2)
                        fn=$(if [ -z $er1 ]
                        then
                                tuananh=10;
                        else
                                echo "function"
                        fi)
						echo "$header ${error_type[0]} $er $er1 $ps"
                        ;;
                ${data[1]})
                        # expected character ";"
                        er=$(echo $line|awk '{for ( i = 1; i <= NF; i++ )
                        if ( $i=="before" ) print $(i+1)}')
                        er1=$(echo $line|awk -v mvar=${error_type[1]} '{for ( i = 1; i <= NF; i++ )
                        if ( $i==mvar ) print $(i+1)}')
                        ps=$(echo $line|awk '{print $0}'|cut -d':' -f2)
                        echo "$header ${error_type[1]} $er1 $ps"
                        ;;
                ${data[2]})
                        # undeclared MACRO or variable
                        er=$(echo $line|awk -v mvar=${error_type[2]} '{for ( i = 1; i <= NF; i++ )
                        if ( $i==mvar ) print $(i-1)}')
                        ps=$(echo $line|awk '{print $0}'|cut -d':' -f2)
                        echo "$header ${error_type[2]} $er $ps"
                        ;;
             esac
}





function test_get_lib_flag()
{
	get_library_flag_from_name "printk"
	get_library_flag_from_name "printf"
	get_library_flag_from_name "kill"
	get_library_flag_from_name "SIGINT"
	get_library_flag_from_name "memset"
	get_library_flag_from_name "pthread_join"

}

function test_add_lib_flag()
{
	local ret 
	add_lib_flag $1 $2
	if [[ $? != 0 ]]; then 
		echo "error at add_lib_flag for $1"
		return 127
	fi
	
}

function test_add_semicolon()
{
	add_semicolon $1
	
	if [[ $? != 0 ]]; then 
		echo "add semicolon failed"
	fi

}

function check_un_ex_und()
{
#awk '/error:/ {print NR,$0}' $output_file_check > "$output_file_check_after_find"

#	local ret=$(func_handler unknown expected undeclared )
	awk '/warning:/ {print NR,$0}' $output_file_check > "$output_file_check_after_find"

	local ret=$(func_handler implicit kkka kkkk)

	IFS=' ' read -r -a array <<< "$ret"
	
	local length=${#array[2]} 
	(( length -=2 ))	
	local tmp_var=$(echo ${array[2]:1:$length})

	test_add_lib_flag "${array[0]}" $tmp_var

	rm  -f $output_file_check $output_file_check_after_find 

}
function rebuild()
{
	make FLAGS="$FLAGS $ret_option" FILE_IN=$OUTPUT_FILE &> "$output_file_check"
}

prepare_header $db_file
if [[ $? != 0 ]]; then 
	echo "prepare header failed"
else 
	echo "complete get db.txt"
fi
#make >& ${output_file_check}

rebuild
check_un_ex_und



